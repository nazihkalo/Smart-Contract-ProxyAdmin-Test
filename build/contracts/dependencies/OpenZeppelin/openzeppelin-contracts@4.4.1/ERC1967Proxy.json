{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_logic",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "allSourcePaths": {
    "1": "/Users/nazihkalo/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.1/contracts/proxy/ERC1967/ERC1967Proxy.sol",
    "2": "/Users/nazihkalo/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.1/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
    "3": "/Users/nazihkalo/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.1/contracts/proxy/Proxy.sol"
  },
  "ast": {
    "absolutePath": "/Users/nazihkalo/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.1/contracts/proxy/ERC1967/ERC1967Proxy.sol",
    "exportedSymbols": {
      "Address": [
        1260
      ],
      "ERC1967Proxy": [
        530
      ],
      "ERC1967Upgrade": [
        901
      ],
      "IBeacon": [
        963
      ],
      "Proxy": [
        953
      ],
      "StorageSlot": [
        1320
      ]
    },
    "id": 531,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 479,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "99:23:1"
      },
      {
        "absolutePath": "/Users/nazihkalo/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.1/contracts/proxy/Proxy.sol",
        "file": "../Proxy.sol",
        "id": 480,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 531,
        "sourceUnit": 954,
        "src": "124:22:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/nazihkalo/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.1/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
        "file": "./ERC1967Upgrade.sol",
        "id": 481,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 531,
        "sourceUnit": 902,
        "src": "147:30:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 483,
              "name": "Proxy",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 953,
              "src": "577:5:1"
            },
            "id": 484,
            "nodeType": "InheritanceSpecifier",
            "src": "577:5:1"
          },
          {
            "baseName": {
              "id": 485,
              "name": "ERC1967Upgrade",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 901,
              "src": "584:14:1"
            },
            "id": 486,
            "nodeType": "InheritanceSpecifier",
            "src": "584:14:1"
          }
        ],
        "canonicalName": "ERC1967Proxy",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 482,
          "nodeType": "StructuredDocumentation",
          "src": "179:372:1",
          "text": " @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n implementation address that can be changed. This address is stored in storage in the location specified by\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n implementation behind the proxy."
        },
        "fullyImplemented": true,
        "id": 530,
        "linearizedBaseContracts": [
          530,
          901,
          953
        ],
        "name": "ERC1967Proxy",
        "nameLocation": "561:12:1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 516,
              "nodeType": "Block",
              "src": "1001:161:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "id": 507,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 495,
                          "name": "_IMPLEMENTATION_SLOT",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 565,
                          "src": "1018:20:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 505,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "656970313936372e70726f78792e696d706c656d656e746174696f6e",
                                        "id": 501,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "1068:30:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_stringliteral_360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd",
                                          "typeString": "literal_string \"eip1967.proxy.implementation\""
                                        },
                                        "value": "eip1967.proxy.implementation"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_stringliteral_360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd",
                                          "typeString": "literal_string \"eip1967.proxy.implementation\""
                                        }
                                      ],
                                      "id": 500,
                                      "name": "keccak256",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -8,
                                      "src": "1058:9:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                        "typeString": "function (bytes memory) pure returns (bytes32)"
                                      }
                                    },
                                    "id": 502,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "1058:41:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  ],
                                  "id": 499,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "1050:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_uint256_$",
                                    "typeString": "type(uint256)"
                                  },
                                  "typeName": {
                                    "id": 498,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1050:7:1",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 503,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1050:50:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "hexValue": "31",
                                "id": 504,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1103:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "1050:54:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 497,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1042:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_bytes32_$",
                              "typeString": "type(bytes32)"
                            },
                            "typeName": {
                              "id": 496,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "1042:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 506,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1042:63:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "src": "1018:87:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 494,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "1011:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 508,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1011:95:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 509,
                  "nodeType": "ExpressionStatement",
                  "src": "1011:95:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 511,
                        "name": "_logic",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 489,
                        "src": "1134:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 512,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 491,
                        "src": "1142:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 513,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1149:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 510,
                      "name": "_upgradeToAndCall",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 652,
                      "src": "1116:17:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
                        "typeString": "function (address,bytes memory,bool)"
                      }
                    },
                    "id": 514,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1116:39:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 515,
                  "nodeType": "ExpressionStatement",
                  "src": "1116:39:1"
                }
              ]
            },
            "documentation": {
              "id": 487,
              "nodeType": "StructuredDocumentation",
              "src": "605:335:1",
              "text": " @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n function call, and allows initializating the storage of the proxy like a Solidity constructor."
            },
            "id": 517,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 492,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 489,
                  "mutability": "mutable",
                  "name": "_logic",
                  "nameLocation": "965:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 517,
                  "src": "957:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 488,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "957:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 491,
                  "mutability": "mutable",
                  "name": "_data",
                  "nameLocation": "986:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 517,
                  "src": "973:18:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 490,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "973:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "956:36:1"
            },
            "returnParameters": {
              "id": 493,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1001:0:1"
            },
            "scope": 530,
            "src": "945:217:1",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              918
            ],
            "body": {
              "id": 528,
              "nodeType": "Block",
              "src": "1321:59:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 524,
                        "name": "ERC1967Upgrade",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 901,
                        "src": "1338:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ERC1967Upgrade_$901_$",
                          "typeString": "type(contract ERC1967Upgrade)"
                        }
                      },
                      "id": 525,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_getImplementation",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 583,
                      "src": "1338:33:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                        "typeString": "function () view returns (address)"
                      }
                    },
                    "id": 526,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1338:35:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 523,
                  "id": 527,
                  "nodeType": "Return",
                  "src": "1331:42:1"
                }
              ]
            },
            "documentation": {
              "id": 518,
              "nodeType": "StructuredDocumentation",
              "src": "1168:67:1",
              "text": " @dev Returns the current implementation address."
            },
            "id": 529,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_implementation",
            "nameLocation": "1249:15:1",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 520,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1289:8:1"
            },
            "parameters": {
              "id": 519,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1264:2:1"
            },
            "returnParameters": {
              "id": 523,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 522,
                  "mutability": "mutable",
                  "name": "impl",
                  "nameLocation": "1315:4:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 529,
                  "src": "1307:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 521,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1307:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1306:14:1"
            },
            "scope": 530,
            "src": "1240:140:1",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 531,
        "src": "552:830:1",
        "usedErrors": []
      }
    ],
    "src": "99:1284:1"
  },
  "bytecode": "608060405260405161078d38038061078d83398101604081905261002291610337565b61004d60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd610405565b600080516020610746833981519152146100695761006961042a565b6100758282600061007c565b505061048f565b610085836100b2565b6000825111806100925750805b156100ad576100ab83836100f260201b6100291760201c565b505b505050565b6100bb8161011e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606101178383604051806060016040528060278152602001610766602791396101de565b9392505050565b610131816102b360201b6100551760201c565b6101985760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101bd60008051602061074683398151915260001b6102b960201b61005b1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060833b61023d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161018f565b600080856001600160a01b0316856040516102589190610440565b600060405180830381855af49150503d8060008114610293576040519150601f19603f3d011682016040523d82523d6000602084013e610298565b606091505b5090925090506102a98282866102bc565b9695505050505050565b3b151590565b90565b606083156102cb575081610117565b8251156102db5782518084602001fd5b8160405162461bcd60e51b815260040161018f919061045c565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561032657818101518382015260200161030e565b838111156100ab5750506000910152565b6000806040838503121561034a57600080fd5b82516001600160a01b038116811461036157600080fd5b60208401519092506001600160401b038082111561037e57600080fd5b818501915085601f83011261039257600080fd5b8151818111156103a4576103a46102f5565b604051601f8201601f19908116603f011681019083821181831017156103cc576103cc6102f5565b816040528281528860208487010111156103e557600080fd5b6103f683602083016020880161030b565b80955050505050509250929050565b60008282101561042557634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825161045281846020870161030b565b9190910192915050565b602081526000825180602084015261047b81604085016020870161030b565b601f01601f19169190910160400192915050565b6102a88061049e6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261005e565b610096565b565b606061004e838360405180606001604052806027815260200161024c602791396100ba565b9392505050565b3b151590565b90565b60006100917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156100b5573d6000f35b3d6000fd5b6060833b61011e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b03168560405161013991906101fc565b600060405180830381855af49150503d8060008114610174576040519150601f19603f3d011682016040523d82523d6000602084013e610179565b606091505b5091509150610189828286610193565b9695505050505050565b606083156101a257508161004e565b8251156101b25782518084602001fd5b8160405162461bcd60e51b81526004016101159190610218565b60005b838110156101e75781810151838201526020016101cf565b838111156101f6576000848401525b50505050565b6000825161020e8184602087016101cc565b9190910192915050565b60208152600082518060208401526102378160408501602087016101cc565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fdfa358cb73d0ba271e7b4702ef7e2932f5c04765b746c0f801cd665117384d264736f6c634300080b0033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
  "bytecodeSha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.11+commit.d7f03943"
  },
  "contractName": "ERC1967Proxy",
  "coverageMap": {
    "branches": {
      "1": {},
      "2": {},
      "3": {}
    },
    "statements": {
      "1": {
        "ERC1967Proxy._implementation": {
          "3": [
            1331,
            1373
          ]
        }
      },
      "2": {
        "ERC1967Upgrade._getImplementation": {
          "4": [
            1312,
            1373
          ]
        }
      },
      "3": {
        "Proxy.<fallback>": {
          "1": [
            2661,
            2672
          ]
        },
        "Proxy.<receive>": {
          "0": [
            2884,
            2895
          ]
        },
        "Proxy._fallback": {
          "2": [
            2383,
            2411
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.4.1/ERC1967Upgrade",
    "OpenZeppelin/openzeppelin-contracts@4.4.1/Proxy"
  ],
  "deployedBytecode": "60806040523661001357610011610017565b005b6100115b61002761002261005e565b610096565b565b606061004e838360405180606001604052806027815260200161024c602791396100ba565b9392505050565b3b151590565b90565b60006100917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156100b5573d6000f35b3d6000fd5b6060833b61011e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b03168560405161013991906101fc565b600060405180830381855af49150503d8060008114610174576040519150601f19603f3d011682016040523d82523d6000602084013e610179565b606091505b5091509150610189828286610193565b9695505050505050565b606083156101a257508161004e565b8251156101b25782518084602001fd5b8160405162461bcd60e51b81526004016101159190610218565b60005b838110156101e75781810151838201526020016101cf565b838111156101f6576000848401525b50505050565b6000825161020e8184602087016101cc565b9190910192915050565b60208152600082518060208401526102378160408501602087016101cc565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fdfa358cb73d0ba271e7b4702ef7e2932f5c04765b746c0f801cd665117384d264736f6c634300080b0033",
  "deployedSourceMap": "552:830:1:-:0;;;;;;2884:11:3;:9;:11::i;:::-;552:830:1;;2661:11:3;2308:110;2383:28;2393:17;:15;:17::i;:::-;2383:9;:28::i;:::-;2308:110::o;6223:198:5:-;6306:12;6337:77;6358:6;6366:4;6337:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6330:84;6223:198;-1:-1:-1;;;6223:198:5:o;771:377::-;1087:20;1133:8;;;771:377::o;1599:147:7:-;1726:4;1599:147::o;1240:140:1:-;1307:12;1338:35;969:66:2;1319:54;-1:-1:-1;;;;;1319:54:2;;1240:140;1338:35:1;1331:42;;1240:140;:::o;934:895:3:-;1272:14;1269:1;1266;1253:34;1486:1;1483;1467:14;1464:1;1448:14;1441:5;1428:60;1562:16;1559:1;1556;1541:38;1600:6;1667:66;;;;1782:16;1779:1;1772:27;1667:66;1702:16;1699:1;1692:27;6607:387:5;6748:12;1087:20;;6772:69;;;;-1:-1:-1;;;6772:69:5;;216:2:12;6772:69:5;;;198:21:12;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:12;;;338:36;391:19;;6772:69:5;;;;;;;;;6853:12;6867:23;6894:6;-1:-1:-1;;;;;6894:19:5;6914:4;6894:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6852:67;;;;6936:51;6953:7;6962:10;6974:12;6936:16;:51::i;:::-;6929:58;6607:387;-1:-1:-1;;;;;;6607:387:5:o;7214:692::-;7360:12;7388:7;7384:516;;;-1:-1:-1;7418:10:5;7411:17;;7384:516;7529:17;;:21;7525:365;;7723:10;7717:17;7783:15;7770:10;7766:2;7762:19;7755:44;7525:365;7862:12;7855:20;;-1:-1:-1;;;7855:20:5;;;;;;;;:::i;421:258:12:-;493:1;503:113;517:6;514:1;511:13;503:113;;;593:11;;;587:18;574:11;;;567:39;539:2;532:10;503:113;;;634:6;631:1;628:13;625:48;;;669:1;660:6;655:3;651:16;644:27;625:48;;421:258;;;:::o;684:274::-;813:3;851:6;845:13;867:53;913:6;908:3;901:4;893:6;889:17;867:53;:::i;:::-;936:16;;;;;684:274;-1:-1:-1;;684:274:12:o;963:383::-;1112:2;1101:9;1094:21;1075:4;1144:6;1138:13;1187:6;1182:2;1171:9;1167:18;1160:34;1203:66;1262:6;1257:2;1246:9;1242:18;1237:2;1229:6;1225:15;1203:66;:::i;:::-;1330:2;1309:15;-1:-1:-1;;1305:29:12;1290:45;;;;1337:2;1286:54;;963:383;-1:-1:-1;;963:383:12:o",
  "language": "Solidity",
  "natspec": {
    "details": "This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Initializes the upgradeable proxy with an initial implementation specified by `_logic`. If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity constructor."
      }
    },
    "version": 1
  },
  "offset": [
    552,
    1382
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH2 0x13 JUMPI PUSH2 0x11 PUSH2 0x17 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11 JUMPDEST PUSH2 0x27 PUSH2 0x22 PUSH2 0x5E JUMP JUMPDEST PUSH2 0x96 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4E DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24C PUSH1 0x27 SWAP2 CODECOPY PUSH2 0xBA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x91 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0xB5 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 DUP4 EXTCODESIZE PUSH2 0x11E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x139 SWAP2 SWAP1 PUSH2 0x1FC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x174 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x179 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x189 DUP3 DUP3 DUP7 PUSH2 0x193 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1A2 JUMPI POP DUP2 PUSH2 0x4E JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1B2 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x115 SWAP2 SWAP1 PUSH2 0x218 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1E7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1CF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1F6 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x20E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1CC JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x237 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1CC JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x70667358221220FDFA35 DUP13 0xB7 RETURNDATASIZE SIGNEXTEND LOG2 PUSH18 0xE7B4702EF7E2932F5C04765B746C0F801CD6 PUSH6 0x117384D26473 PUSH16 0x6C634300080B00330000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        552,
        1382
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        552,
        1382
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        552,
        1382
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5": {
      "fn": null,
      "offset": [
        552,
        1382
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "6": {
      "fn": null,
      "offset": [
        552,
        1382
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13"
    },
    "9": {
      "fn": null,
      "offset": [
        552,
        1382
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "10": {
      "fn": "Proxy.<receive>",
      "offset": [
        2884,
        2895
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 0,
      "value": "0x11"
    },
    "13": {
      "fn": "Proxy.<receive>",
      "offset": [
        2884,
        2893
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x17"
    },
    "16": {
      "fn": "Proxy.<receive>",
      "jump": "i",
      "offset": [
        2884,
        2895
      ],
      "op": "JUMP",
      "path": "3"
    },
    "17": {
      "fn": "Proxy.<receive>",
      "offset": [
        2884,
        2895
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "18": {
      "offset": [
        552,
        1382
      ],
      "op": "STOP",
      "path": "1"
    },
    "19": {
      "fn": "Proxy.<receive>",
      "offset": [
        552,
        1382
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "20": {
      "fn": "Proxy.<fallback>",
      "offset": [
        2661,
        2672
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 1,
      "value": "0x11"
    },
    "23": {
      "fn": "Proxy._fallback",
      "offset": [
        2308,
        2418
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "24": {
      "fn": "Proxy._fallback",
      "offset": [
        2383,
        2411
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 2,
      "value": "0x27"
    },
    "27": {
      "fn": "Proxy._fallback",
      "offset": [
        2393,
        2410
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x22"
    },
    "30": {
      "fn": "Proxy._fallback",
      "offset": [
        2393,
        2408
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x5E"
    },
    "33": {
      "fn": "Proxy._fallback",
      "jump": "i",
      "offset": [
        2393,
        2410
      ],
      "op": "JUMP",
      "path": "3"
    },
    "34": {
      "fn": "Proxy._fallback",
      "offset": [
        2393,
        2410
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "35": {
      "fn": "Proxy._fallback",
      "offset": [
        2383,
        2392
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x96"
    },
    "38": {
      "fn": "Proxy._fallback",
      "jump": "i",
      "offset": [
        2383,
        2411
      ],
      "op": "JUMP",
      "path": "3"
    },
    "39": {
      "fn": "Proxy._fallback",
      "offset": [
        2383,
        2411
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "40": {
      "fn": "Proxy._fallback",
      "jump": "o",
      "offset": [
        2308,
        2418
      ],
      "op": "JUMP",
      "path": "3"
    },
    "41": {
      "op": "JUMPDEST"
    },
    "42": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "44": {
      "op": "PUSH2",
      "value": "0x4E"
    },
    "47": {
      "op": "DUP4"
    },
    "48": {
      "op": "DUP4"
    },
    "49": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "51": {
      "op": "MLOAD"
    },
    "52": {
      "op": "DUP1"
    },
    "53": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "55": {
      "op": "ADD"
    },
    "56": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "58": {
      "op": "MSTORE"
    },
    "59": {
      "op": "DUP1"
    },
    "60": {
      "op": "PUSH1",
      "value": "0x27"
    },
    "62": {
      "op": "DUP2"
    },
    "63": {
      "op": "MSTORE"
    },
    "64": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "66": {
      "op": "ADD"
    },
    "67": {
      "op": "PUSH2",
      "value": "0x24C"
    },
    "70": {
      "op": "PUSH1",
      "value": "0x27"
    },
    "72": {
      "op": "SWAP2"
    },
    "73": {
      "op": "CODECOPY"
    },
    "74": {
      "op": "PUSH2",
      "value": "0xBA"
    },
    "77": {
      "jump": "i",
      "op": "JUMP"
    },
    "78": {
      "op": "JUMPDEST"
    },
    "79": {
      "op": "SWAP4"
    },
    "80": {
      "op": "SWAP3"
    },
    "81": {
      "op": "POP"
    },
    "82": {
      "op": "POP"
    },
    "83": {
      "op": "POP"
    },
    "84": {
      "jump": "o",
      "op": "JUMP"
    },
    "85": {
      "op": "JUMPDEST"
    },
    "86": {
      "op": "EXTCODESIZE"
    },
    "87": {
      "op": "ISZERO"
    },
    "88": {
      "op": "ISZERO"
    },
    "89": {
      "op": "SWAP1"
    },
    "90": {
      "jump": "o",
      "op": "JUMP"
    },
    "91": {
      "op": "JUMPDEST"
    },
    "92": {
      "op": "SWAP1"
    },
    "93": {
      "jump": "o",
      "op": "JUMP"
    },
    "94": {
      "fn": "ERC1967Proxy._implementation",
      "offset": [
        1240,
        1380
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "95": {
      "fn": "ERC1967Proxy._implementation",
      "offset": [
        1307,
        1319
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "97": {
      "fn": "ERC1967Proxy._implementation",
      "offset": [
        1338,
        1373
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 3,
      "value": "0x91"
    },
    "100": {
      "offset": [
        969,
        1035
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC"
    },
    "133": {
      "fn": "ERC1967Upgrade._getImplementation",
      "offset": [
        1319,
        1373
      ],
      "op": "SLOAD",
      "path": "2",
      "statement": 4
    },
    "134": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "136": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "138": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "140": {
      "op": "SHL"
    },
    "141": {
      "op": "SUB"
    },
    "142": {
      "fn": "ERC1967Upgrade._getImplementation",
      "offset": [
        1319,
        1373
      ],
      "op": "AND",
      "path": "2"
    },
    "143": {
      "fn": "ERC1967Upgrade._getImplementation",
      "offset": [
        1319,
        1373
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "144": {
      "fn": "ERC1967Upgrade._getImplementation",
      "offset": [
        1240,
        1380
      ],
      "op": "JUMP",
      "path": "2"
    },
    "145": {
      "fn": "ERC1967Proxy._implementation",
      "offset": [
        1338,
        1373
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "146": {
      "fn": "ERC1967Proxy._implementation",
      "offset": [
        1331,
        1373
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "147": {
      "fn": "ERC1967Proxy._implementation",
      "offset": [
        1331,
        1373
      ],
      "op": "POP",
      "path": "1"
    },
    "148": {
      "fn": "ERC1967Proxy._implementation",
      "offset": [
        1240,
        1380
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "149": {
      "fn": "ERC1967Proxy._implementation",
      "jump": "o",
      "offset": [
        1240,
        1380
      ],
      "op": "JUMP",
      "path": "1"
    },
    "150": {
      "fn": "Proxy._delegate",
      "offset": [
        934,
        1829
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "151": {
      "fn": "Proxy._delegate",
      "offset": [
        1272,
        1286
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "152": {
      "fn": "Proxy._delegate",
      "offset": [
        1269,
        1270
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "154": {
      "fn": "Proxy._delegate",
      "offset": [
        1266,
        1267
      ],
      "op": "DUP1",
      "path": "3"
    },
    "155": {
      "fn": "Proxy._delegate",
      "offset": [
        1253,
        1287
      ],
      "op": "CALLDATACOPY",
      "path": "3"
    },
    "156": {
      "fn": "Proxy._delegate",
      "offset": [
        1486,
        1487
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "158": {
      "fn": "Proxy._delegate",
      "offset": [
        1483,
        1484
      ],
      "op": "DUP1",
      "path": "3"
    },
    "159": {
      "fn": "Proxy._delegate",
      "offset": [
        1467,
        1481
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "160": {
      "fn": "Proxy._delegate",
      "offset": [
        1464,
        1465
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "162": {
      "fn": "Proxy._delegate",
      "offset": [
        1448,
        1462
      ],
      "op": "DUP5",
      "path": "3"
    },
    "163": {
      "fn": "Proxy._delegate",
      "offset": [
        1441,
        1446
      ],
      "op": "GAS",
      "path": "3"
    },
    "164": {
      "fn": "Proxy._delegate",
      "offset": [
        1428,
        1488
      ],
      "op": "DELEGATECALL",
      "path": "3"
    },
    "165": {
      "fn": "Proxy._delegate",
      "offset": [
        1562,
        1578
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "166": {
      "fn": "Proxy._delegate",
      "offset": [
        1559,
        1560
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "168": {
      "fn": "Proxy._delegate",
      "offset": [
        1556,
        1557
      ],
      "op": "DUP1",
      "path": "3"
    },
    "169": {
      "fn": "Proxy._delegate",
      "offset": [
        1541,
        1579
      ],
      "op": "RETURNDATACOPY",
      "path": "3"
    },
    "170": {
      "fn": "Proxy._delegate",
      "offset": [
        1600,
        1606
      ],
      "op": "DUP1",
      "path": "3"
    },
    "171": {
      "fn": "Proxy._delegate",
      "offset": [
        1667,
        1733
      ],
      "op": "DUP1",
      "path": "3"
    },
    "172": {
      "fn": "Proxy._delegate",
      "offset": [
        1667,
        1733
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "173": {
      "fn": "Proxy._delegate",
      "offset": [
        1667,
        1733
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xB5"
    },
    "176": {
      "fn": "Proxy._delegate",
      "offset": [
        1667,
        1733
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "177": {
      "fn": "Proxy._delegate",
      "offset": [
        1782,
        1798
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "178": {
      "fn": "Proxy._delegate",
      "offset": [
        1779,
        1780
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "180": {
      "fn": "Proxy._delegate",
      "offset": [
        1772,
        1799
      ],
      "op": "RETURN",
      "path": "3"
    },
    "181": {
      "fn": "Proxy._delegate",
      "offset": [
        1667,
        1733
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "182": {
      "fn": "Proxy._delegate",
      "offset": [
        1702,
        1718
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "183": {
      "fn": "Proxy._delegate",
      "offset": [
        1699,
        1700
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "185": {
      "fn": "Proxy._delegate",
      "offset": [
        1692,
        1719
      ],
      "op": "REVERT",
      "path": "3"
    },
    "186": {
      "op": "JUMPDEST"
    },
    "187": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "189": {
      "op": "DUP4"
    },
    "190": {
      "op": "EXTCODESIZE"
    },
    "191": {
      "op": "PUSH2",
      "value": "0x11E"
    },
    "194": {
      "op": "JUMPI"
    },
    "195": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "197": {
      "op": "MLOAD"
    },
    "198": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "202": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "204": {
      "op": "SHL"
    },
    "205": {
      "op": "DUP2"
    },
    "206": {
      "op": "MSTORE"
    },
    "207": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "209": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "211": {
      "op": "DUP3"
    },
    "212": {
      "op": "ADD"
    },
    "213": {
      "op": "MSTORE"
    },
    "214": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "216": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "218": {
      "op": "DUP3"
    },
    "219": {
      "op": "ADD"
    },
    "220": {
      "op": "MSTORE"
    },
    "221": {
      "op": "PUSH32",
      "value": "0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F"
    },
    "254": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "256": {
      "op": "DUP3"
    },
    "257": {
      "op": "ADD"
    },
    "258": {
      "op": "MSTORE"
    },
    "259": {
      "op": "PUSH6",
      "value": "0x1B9D1C9858DD"
    },
    "266": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "268": {
      "op": "SHL"
    },
    "269": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "271": {
      "op": "DUP3"
    },
    "272": {
      "op": "ADD"
    },
    "273": {
      "op": "MSTORE"
    },
    "274": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "276": {
      "op": "ADD"
    },
    "277": {
      "op": "JUMPDEST"
    },
    "278": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "280": {
      "op": "MLOAD"
    },
    "281": {
      "op": "DUP1"
    },
    "282": {
      "op": "SWAP2"
    },
    "283": {
      "op": "SUB"
    },
    "284": {
      "op": "SWAP1"
    },
    "285": {
      "op": "REVERT"
    },
    "286": {
      "op": "JUMPDEST"
    },
    "287": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "289": {
      "op": "DUP1"
    },
    "290": {
      "op": "DUP6"
    },
    "291": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "293": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "295": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "297": {
      "op": "SHL"
    },
    "298": {
      "op": "SUB"
    },
    "299": {
      "op": "AND"
    },
    "300": {
      "op": "DUP6"
    },
    "301": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "303": {
      "op": "MLOAD"
    },
    "304": {
      "op": "PUSH2",
      "value": "0x139"
    },
    "307": {
      "op": "SWAP2"
    },
    "308": {
      "op": "SWAP1"
    },
    "309": {
      "op": "PUSH2",
      "value": "0x1FC"
    },
    "312": {
      "jump": "i",
      "op": "JUMP"
    },
    "313": {
      "op": "JUMPDEST"
    },
    "314": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "316": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "318": {
      "op": "MLOAD"
    },
    "319": {
      "op": "DUP1"
    },
    "320": {
      "op": "DUP4"
    },
    "321": {
      "op": "SUB"
    },
    "322": {
      "op": "DUP2"
    },
    "323": {
      "op": "DUP6"
    },
    "324": {
      "op": "GAS"
    },
    "325": {
      "op": "DELEGATECALL"
    },
    "326": {
      "op": "SWAP2"
    },
    "327": {
      "op": "POP"
    },
    "328": {
      "op": "POP"
    },
    "329": {
      "op": "RETURNDATASIZE"
    },
    "330": {
      "op": "DUP1"
    },
    "331": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "333": {
      "op": "DUP2"
    },
    "334": {
      "op": "EQ"
    },
    "335": {
      "op": "PUSH2",
      "value": "0x174"
    },
    "338": {
      "op": "JUMPI"
    },
    "339": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "341": {
      "op": "MLOAD"
    },
    "342": {
      "op": "SWAP2"
    },
    "343": {
      "op": "POP"
    },
    "344": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "346": {
      "op": "NOT"
    },
    "347": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "349": {
      "op": "RETURNDATASIZE"
    },
    "350": {
      "op": "ADD"
    },
    "351": {
      "op": "AND"
    },
    "352": {
      "op": "DUP3"
    },
    "353": {
      "op": "ADD"
    },
    "354": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "356": {
      "op": "MSTORE"
    },
    "357": {
      "op": "RETURNDATASIZE"
    },
    "358": {
      "op": "DUP3"
    },
    "359": {
      "op": "MSTORE"
    },
    "360": {
      "op": "RETURNDATASIZE"
    },
    "361": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "363": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "365": {
      "op": "DUP5"
    },
    "366": {
      "op": "ADD"
    },
    "367": {
      "op": "RETURNDATACOPY"
    },
    "368": {
      "op": "PUSH2",
      "value": "0x179"
    },
    "371": {
      "op": "JUMP"
    },
    "372": {
      "op": "JUMPDEST"
    },
    "373": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "375": {
      "op": "SWAP2"
    },
    "376": {
      "op": "POP"
    },
    "377": {
      "op": "JUMPDEST"
    },
    "378": {
      "op": "POP"
    },
    "379": {
      "op": "SWAP2"
    },
    "380": {
      "op": "POP"
    },
    "381": {
      "op": "SWAP2"
    },
    "382": {
      "op": "POP"
    },
    "383": {
      "op": "PUSH2",
      "value": "0x189"
    },
    "386": {
      "op": "DUP3"
    },
    "387": {
      "op": "DUP3"
    },
    "388": {
      "op": "DUP7"
    },
    "389": {
      "op": "PUSH2",
      "value": "0x193"
    },
    "392": {
      "jump": "i",
      "op": "JUMP"
    },
    "393": {
      "op": "JUMPDEST"
    },
    "394": {
      "op": "SWAP7"
    },
    "395": {
      "op": "SWAP6"
    },
    "396": {
      "op": "POP"
    },
    "397": {
      "op": "POP"
    },
    "398": {
      "op": "POP"
    },
    "399": {
      "op": "POP"
    },
    "400": {
      "op": "POP"
    },
    "401": {
      "op": "POP"
    },
    "402": {
      "jump": "o",
      "op": "JUMP"
    },
    "403": {
      "op": "JUMPDEST"
    },
    "404": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "406": {
      "op": "DUP4"
    },
    "407": {
      "op": "ISZERO"
    },
    "408": {
      "op": "PUSH2",
      "value": "0x1A2"
    },
    "411": {
      "op": "JUMPI"
    },
    "412": {
      "op": "POP"
    },
    "413": {
      "op": "DUP2"
    },
    "414": {
      "op": "PUSH2",
      "value": "0x4E"
    },
    "417": {
      "op": "JUMP"
    },
    "418": {
      "op": "JUMPDEST"
    },
    "419": {
      "op": "DUP3"
    },
    "420": {
      "op": "MLOAD"
    },
    "421": {
      "op": "ISZERO"
    },
    "422": {
      "op": "PUSH2",
      "value": "0x1B2"
    },
    "425": {
      "op": "JUMPI"
    },
    "426": {
      "op": "DUP3"
    },
    "427": {
      "op": "MLOAD"
    },
    "428": {
      "op": "DUP1"
    },
    "429": {
      "op": "DUP5"
    },
    "430": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "432": {
      "op": "ADD"
    },
    "433": {
      "op": "REVERT"
    },
    "434": {
      "op": "JUMPDEST"
    },
    "435": {
      "op": "DUP2"
    },
    "436": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "438": {
      "op": "MLOAD"
    },
    "439": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "443": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "445": {
      "op": "SHL"
    },
    "446": {
      "op": "DUP2"
    },
    "447": {
      "op": "MSTORE"
    },
    "448": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "450": {
      "op": "ADD"
    },
    "451": {
      "op": "PUSH2",
      "value": "0x115"
    },
    "454": {
      "op": "SWAP2"
    },
    "455": {
      "op": "SWAP1"
    },
    "456": {
      "op": "PUSH2",
      "value": "0x218"
    },
    "459": {
      "jump": "i",
      "op": "JUMP"
    },
    "460": {
      "op": "JUMPDEST"
    },
    "461": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "463": {
      "op": "JUMPDEST"
    },
    "464": {
      "op": "DUP4"
    },
    "465": {
      "op": "DUP2"
    },
    "466": {
      "op": "LT"
    },
    "467": {
      "op": "ISZERO"
    },
    "468": {
      "op": "PUSH2",
      "value": "0x1E7"
    },
    "471": {
      "op": "JUMPI"
    },
    "472": {
      "op": "DUP2"
    },
    "473": {
      "op": "DUP2"
    },
    "474": {
      "op": "ADD"
    },
    "475": {
      "op": "MLOAD"
    },
    "476": {
      "op": "DUP4"
    },
    "477": {
      "op": "DUP3"
    },
    "478": {
      "op": "ADD"
    },
    "479": {
      "op": "MSTORE"
    },
    "480": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "482": {
      "op": "ADD"
    },
    "483": {
      "op": "PUSH2",
      "value": "0x1CF"
    },
    "486": {
      "op": "JUMP"
    },
    "487": {
      "op": "JUMPDEST"
    },
    "488": {
      "op": "DUP4"
    },
    "489": {
      "op": "DUP2"
    },
    "490": {
      "op": "GT"
    },
    "491": {
      "op": "ISZERO"
    },
    "492": {
      "op": "PUSH2",
      "value": "0x1F6"
    },
    "495": {
      "op": "JUMPI"
    },
    "496": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "498": {
      "op": "DUP5"
    },
    "499": {
      "op": "DUP5"
    },
    "500": {
      "op": "ADD"
    },
    "501": {
      "op": "MSTORE"
    },
    "502": {
      "op": "JUMPDEST"
    },
    "503": {
      "op": "POP"
    },
    "504": {
      "op": "POP"
    },
    "505": {
      "op": "POP"
    },
    "506": {
      "op": "POP"
    },
    "507": {
      "jump": "o",
      "op": "JUMP"
    },
    "508": {
      "op": "JUMPDEST"
    },
    "509": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "511": {
      "op": "DUP3"
    },
    "512": {
      "op": "MLOAD"
    },
    "513": {
      "op": "PUSH2",
      "value": "0x20E"
    },
    "516": {
      "op": "DUP2"
    },
    "517": {
      "op": "DUP5"
    },
    "518": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "520": {
      "op": "DUP8"
    },
    "521": {
      "op": "ADD"
    },
    "522": {
      "op": "PUSH2",
      "value": "0x1CC"
    },
    "525": {
      "jump": "i",
      "op": "JUMP"
    },
    "526": {
      "op": "JUMPDEST"
    },
    "527": {
      "op": "SWAP2"
    },
    "528": {
      "op": "SWAP1"
    },
    "529": {
      "op": "SWAP2"
    },
    "530": {
      "op": "ADD"
    },
    "531": {
      "op": "SWAP3"
    },
    "532": {
      "op": "SWAP2"
    },
    "533": {
      "op": "POP"
    },
    "534": {
      "op": "POP"
    },
    "535": {
      "jump": "o",
      "op": "JUMP"
    },
    "536": {
      "op": "JUMPDEST"
    },
    "537": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "539": {
      "op": "DUP2"
    },
    "540": {
      "op": "MSTORE"
    },
    "541": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "543": {
      "op": "DUP3"
    },
    "544": {
      "op": "MLOAD"
    },
    "545": {
      "op": "DUP1"
    },
    "546": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "548": {
      "op": "DUP5"
    },
    "549": {
      "op": "ADD"
    },
    "550": {
      "op": "MSTORE"
    },
    "551": {
      "op": "PUSH2",
      "value": "0x237"
    },
    "554": {
      "op": "DUP2"
    },
    "555": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "557": {
      "op": "DUP6"
    },
    "558": {
      "op": "ADD"
    },
    "559": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "561": {
      "op": "DUP8"
    },
    "562": {
      "op": "ADD"
    },
    "563": {
      "op": "PUSH2",
      "value": "0x1CC"
    },
    "566": {
      "jump": "i",
      "op": "JUMP"
    },
    "567": {
      "op": "JUMPDEST"
    },
    "568": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "570": {
      "op": "ADD"
    },
    "571": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "573": {
      "op": "NOT"
    },
    "574": {
      "op": "AND"
    },
    "575": {
      "op": "SWAP2"
    },
    "576": {
      "op": "SWAP1"
    },
    "577": {
      "op": "SWAP2"
    },
    "578": {
      "op": "ADD"
    },
    "579": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "581": {
      "op": "ADD"
    },
    "582": {
      "op": "SWAP3"
    },
    "583": {
      "op": "SWAP2"
    },
    "584": {
      "op": "POP"
    },
    "585": {
      "op": "POP"
    },
    "586": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "889ca0a26846aa7a1bde22a85cfc18c6ef2057b6",
  "source": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n",
  "sourceMap": "552:830:1:-:0;;;945:217;;;;;;;;;;;;;;;;;;:::i;:::-;1050:54;1103:1;1058:41;1050:54;:::i;:::-;-1:-1:-1;;;;;;;;;;;1018:87:1;1011:95;;;;:::i;:::-;1116:39;1134:6;1142:5;1149;1116:17;:39::i;:::-;945:217;;552:830;;2122:295:2;2260:29;2271:17;2260:10;:29::i;:::-;2317:1;2303:4;:11;:15;:28;;;;2322:9;2303:28;2299:112;;;2347:53;2376:17;2395:4;2347:28;;;;;:53;;:::i;:::-;;2299:112;2122:295;;;:::o;1836:152::-;1902:37;1921:17;1902:18;:37::i;:::-;1954:27;;-1:-1:-1;;;;;1954:27:2;;;;;;;;1836:152;:::o;6223:198:5:-;6306:12;6337:77;6358:6;6366:4;6337:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6330:84;6223:198;-1:-1:-1;;;6223:198:5:o;1471:259:2:-;1552:37;1571:17;1552:18;;;;;:37;;:::i;:::-;1544:95;;;;-1:-1:-1;;;1544:95:2;;2025:2:12;1544:95:2;;;2007:21:12;2064:2;2044:18;;;2037:30;2103:34;2083:18;;;2076:62;-1:-1:-1;;;2154:18:12;;;2147:43;2207:19;;1544:95:2;;;;;;;;;1706:17;1649:48;-1:-1:-1;;;;;;;;;;;1676:20:2;;1649:26;;;;;:48;;:::i;:::-;:74;;-1:-1:-1;;;;;;1649:74:2;-1:-1:-1;;;;;1649:74:2;;;;;;;;;;-1:-1:-1;1471:259:2:o;6607:387:5:-;6748:12;1087:20;;6772:69;;;;-1:-1:-1;;;6772:69:5;;2439:2:12;6772:69:5;;;2421:21:12;2478:2;2458:18;;;2451:30;2517:34;2497:18;;;2490:62;-1:-1:-1;;;2568:18:12;;;2561:36;2614:19;;6772:69:5;2237:402:12;6772:69:5;6853:12;6867:23;6894:6;-1:-1:-1;;;;;6894:19:5;6914:4;6894:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6852:67:5;;-1:-1:-1;6852:67:5;-1:-1:-1;6936:51:5;6852:67;;6974:12;6936:16;:51::i;:::-;6929:58;6607:387;-1:-1:-1;;;;;;6607:387:5:o;771:377::-;1087:20;1133:8;;;771:377::o;1599:147:7:-;1726:4;1599:147::o;7214:692:5:-;7360:12;7388:7;7384:516;;;-1:-1:-1;7418:10:5;7411:17;;7384:516;7529:17;;:21;7525:365;;7723:10;7717:17;7783:15;7770:10;7766:2;7762:19;7755:44;7525:365;7862:12;7855:20;;-1:-1:-1;;;7855:20:5;;;;;;;;:::i;14:127:12:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:258;218:1;228:113;242:6;239:1;236:13;228:113;;;318:11;;;312:18;299:11;;;292:39;264:2;257:10;228:113;;;359:6;356:1;353:13;350:48;;;-1:-1:-1;;394:1:12;376:16;;369:27;146:258::o;409:1050::-;497:6;505;558:2;546:9;537:7;533:23;529:32;526:52;;;574:1;571;564:12;526:52;600:16;;-1:-1:-1;;;;;645:31:12;;635:42;;625:70;;691:1;688;681:12;625:70;763:2;748:18;;742:25;714:5;;-1:-1:-1;;;;;;816:14:12;;;813:34;;;843:1;840;833:12;813:34;881:6;870:9;866:22;856:32;;926:7;919:4;915:2;911:13;907:27;897:55;;948:1;945;938:12;897:55;977:2;971:9;999:2;995;992:10;989:36;;;1005:18;;:::i;:::-;1080:2;1074:9;1048:2;1134:13;;-1:-1:-1;;1130:22:12;;;1154:2;1126:31;1122:40;1110:53;;;1178:18;;;1198:22;;;1175:46;1172:72;;;1224:18;;:::i;:::-;1264:10;1260:2;1253:22;1299:2;1291:6;1284:18;1339:7;1334:2;1329;1325;1321:11;1317:20;1314:33;1311:53;;;1360:1;1357;1350:12;1311:53;1373:55;1425:2;1420;1412:6;1408:15;1403:2;1399;1395:11;1373:55;:::i;:::-;1447:6;1437:16;;;;;;;409:1050;;;;;:::o;1464:222::-;1504:4;1532:1;1529;1526:8;1523:131;;;1576:10;1571:3;1567:20;1564:1;1557:31;1611:4;1608:1;1601:15;1639:4;1636:1;1629:15;1523:131;-1:-1:-1;1671:9:12;;1464:222::o;1691:127::-;1752:10;1747:3;1743:20;1740:1;1733:31;1783:4;1780:1;1773:15;1807:4;1804:1;1797:15;2644:274;2773:3;2811:6;2805:13;2827:53;2873:6;2868:3;2861:4;2853:6;2849:17;2827:53;:::i;:::-;2896:16;;;;;2644:274;-1:-1:-1;;2644:274:12:o;2923:383::-;3072:2;3061:9;3054:21;3035:4;3104:6;3098:13;3147:6;3142:2;3131:9;3127:18;3120:34;3163:66;3222:6;3217:2;3206:9;3202:18;3197:2;3189:6;3185:15;3163:66;:::i;:::-;3290:2;3269:15;-1:-1:-1;;3265:29:12;3250:45;;;;3297:2;3246:54;;2923:383;-1:-1:-1;;2923:383:12:o;:::-;552:830:1;;;;;;",
  "sourcePath": "/Users/nazihkalo/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.1/contracts/proxy/ERC1967/ERC1967Proxy.sol",
  "type": "contract"
}